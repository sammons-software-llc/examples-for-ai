#!/usr/bin/env bash
#
# p - Refined gh wrapper for sub-agent workflows
# Optimized based on 50-project simulation
#

set -euo pipefail

readonly ORG="sammons-software-llc"
readonly CACHE_DIR="${HOME}/.p-cli-cache"
readonly CACHE_TTL=3600  # 1 hour

# Debug mode - set P_DEBUG=1 to see commands
readonly DEBUG="${P_DEBUG:-0}"

# Echo command helper
echo_cmd() {
    if [[ "$DEBUG" == "1" ]] || [[ "${P_ECHO:-0}" == "1" ]]; then
        echo "► $*" >&2
    fi
}

# Initialize cache
[[ ! -d "$CACHE_DIR" ]] && mkdir -p "$CACHE_DIR"

# Cache helper
cache_get() {
    local key="$1"
    local file="$CACHE_DIR/$key"
    if [[ -f "$file" ]] && [[ $(( $(date +%s) - $(stat -f %m "$file" 2>/dev/null || stat -c %Y "$file" 2>/dev/null) )) -lt $CACHE_TTL ]]; then
        cat "$file"
        return 0
    fi
    return 1
}

cache_set() {
    local key="$1"
    local value="$2"
    echo "$value" > "$CACHE_DIR/$key"
}

# Main command router
case "${1:-help}" in
    # Repository commands
    create-repo)
        echo_cmd "gh repo create \"$ORG/$2\" --private --clone"
        gh repo create "$ORG/$2" --private --clone
        ;;
    
    clone-framework)
        echo_cmd "gh api \"repos/$ORG/examples-for-ai/contents/CLAUDE.md\" --jq '.content' | base64 -d > CLAUDE.md"
        gh api "repos/$ORG/examples-for-ai/contents/CLAUDE.md" --jq '.content' | base64 -d > CLAUDE.md
        echo_cmd "mkdir -p context archetypes personas examples"
        mkdir -p context archetypes personas examples
        ;;
    
    # Enhanced task commands
    create-task)
        shift
        # Support --label, --assignee, --milestone
        echo_cmd "gh issue create --label \"task\" $*"
        gh issue create --label "task" "$@"
        ;;
    
    bulk-create-tasks)
        # Read JSON file with task definitions
        local file="$2"
        local project_id="${3:-}"
        
        if [[ -f "$file" ]]; then
            jq -c '.[]' "$file" | while read -r task; do
                title=$(echo "$task" | jq -r '.title')
                body=$(echo "$task" | jq -r '.body // ""')
                labels=$(echo "$task" | jq -r '.labels // "task" | @csv' | tr -d '"')
                
                echo_cmd "gh issue create --title \"$title\" --body \"...\" --label \"$labels\""
                issue_num=$(gh issue create \
                    --title "$title" \
                    --body "$body" \
                    --label "$labels" \
                    --json number \
                    -q '.number')
                
                echo "Created #$issue_num: $title"
                
                # Add to project if specified or cached
                local target_project="${project_id:-$(cache_get "project_id")}"
                if [[ -n "$target_project" ]]; then
                    echo_cmd "gh project item-add \"$target_project\" --owner \"$ORG\" --url \"https://github.com/$ORG/$(basename $PWD)/issues/$issue_num\""
                    gh project item-add "$target_project" --owner "$ORG" --url "https://github.com/$ORG/$(basename $PWD)/issues/$issue_num" 2>/dev/null && \
                        echo "  → Added to project board"
                fi
            done
        fi
        ;;
    
    create-typed-task)
        # Template-based task creation
        local type="$2"
        local title="$3"
        shift 3
        
        case "$type" in
            feature)
                body="## Acceptance Criteria\n- [ ] \n\n## Technical Requirements\n- \n\n## Definition of Done\n- [ ] Tests written\n- [ ] Documentation updated"
                ;;
            bug)
                body="## Description\n\n## Steps to Reproduce\n1. \n\n## Expected Behavior\n\n## Actual Behavior\n"
                ;;
            security)
                body="## Vulnerability\n\n## Impact\n\n## Remediation\n"
                ;;
            *)
                body=""
                ;;
        esac
        
        gh issue create --title "$title" --body "$body" --label "task,$type" "$@"
        ;;
    
    # PR commands with enhancements
    create-pr)
        shift
        gh pr create "$@"
        ;;
    
    get-pr-reviews)
        local pr="$2"
        local format="${3:-text}"
        
        if [[ "$format" == "json" ]]; then
            gh pr view "$pr" --json reviews --jq '.reviews'
        else
            gh pr view "$pr" --json reviews --jq '.reviews[] | "\(.author.login): \(.state)"'
        fi
        ;;
    
    review-pr)
        local pr="$2"
        local comment="$3"
        local author="${4:-agent}"
        
        # Add author prefix for tracking
        gh pr review "$pr" --comment -b "[$author review] $comment"
        ;;
    
    # Workflow shortcuts
    complete-task)
        local issue="$2"
        local pr="$3"
        local comment="${4:-Completed}"
        
        echo_cmd "gh issue close \"$issue\" --comment \"$comment in PR #$pr\""
        # Close issue with PR reference
        gh issue close "$issue" --comment "$comment in PR #$pr"
        
        # Update project board if cached
        if project_id=$(cache_get "project_id"); then
            echo "Updating project board status..."
            # Get the issue's project item
            local query='query($org: String!, $number: Int!) {
              organization(login: $org) {
                projectsV2(first: 10) {
                  nodes {
                    items(first: 50) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            }'
            
            # Find item and move to Merged
            echo_cmd "Moving issue #$issue to Merged column"
            # Simplified: just notify that manual move may be needed
            echo "Note: Manual move to 'Merged' column may be required in project board"
        fi
        ;;
    
    # Agent coordination
    set-context)
        local key="$2"
        local value="$3"
        cache_set "context_$key" "$value"
        ;;
    
    get-context)
        local key="$2"
        cache_get "context_$key" || echo ""
        ;;
    
    wait-for-context)
        local key="$2"
        local timeout="${3:-300}"
        local start=$(date +%s)
        
        while [[ $(($(date +%s) - start)) -lt $timeout ]]; do
            if value=$(cache_get "context_$key"); then
                echo "$value"
                return 0
            fi
            sleep 5
        done
        
        return 1
        ;;
    
    get-agent-tasks)
        local agent="${2:-}"
        local status="${3:-open}"
        
        if [[ -n "$agent" ]]; then
            gh issue list --label "task,$agent" --state "$status"
        else
            gh issue list --label "task" --state "$status"
        fi
        ;;
    
    # Status aggregation
    check-reviews-complete)
        local pr="$2"
        local required="${3:-3}"  # Default 3 expert reviews
        
        local approved=$(gh pr view "$pr" --json reviews --jq '[.reviews[] | select(.state == "APPROVED")] | length')
        
        if [[ $approved -ge $required ]]; then
            echo "true"
            return 0
        else
            echo "false ($approved/$required approved)"
            return 1
        fi
        ;;
    
    # Project board management
    create-project)
        local name="$2"
        echo_cmd "gh project create --owner \"$ORG\" --title \"$name\""
        local project_info=$(gh project create --owner "$ORG" --title "$name" --format json)
        local project_id=$(echo "$project_info" | jq -r '.id')
        
        if [[ -n "$project_id" ]]; then
            # Cache the project ID
            cache_set "project_id" "$project_id"
            cache_set "project_name" "$name"
            
            # Create default columns
            echo "Created project: $name (ID: $project_id)"
            echo "Note: Project uses default 'Status' field with columns"
            
            echo "Project board ready: https://github.com/orgs/$ORG/projects/$project_id"
        else
            echo "Failed to create project"
            return 1
        fi
        ;;
    
    list-projects)
        echo_cmd "gh project list --owner \"$ORG\" --limit 100"
        gh project list --owner "$ORG" --limit 100 --format table
        ;;
    
    add-to-project)
        local item_type="$2"  # issue or pr
        local item_num="$3"
        local project_id="${4:-$(cache_get "project_id")}"
        
        if [[ -z "$project_id" ]]; then
            echo "No project ID provided or cached. Use 'p cache-project <name>' first."
            return 1
        fi
        
        echo_cmd "gh project item-add \"$project_id\" --owner \"$ORG\" --url \"https://github.com/$ORG/$(basename $PWD)/${item_type}s/$item_num\""
        gh project item-add "$project_id" --owner "$ORG" --url "https://github.com/$ORG/$(basename $PWD)/${item_type}s/$item_num"
        ;;
    
    move-to-column)
        local item_id="$2"
        local column="$3"
        local project_id="${4:-$(cache_get "project_id")}"
        
        if [[ -z "$project_id" ]]; then
            echo "No project ID provided or cached. Use 'p cache-project <name>' first."
            return 1
        fi
        
        echo_cmd "gh project item-edit --id \"$item_id\" --project-id \"$project_id\" --field-id \"Status\" --single-select-option-id \"$column\""
        gh project item-edit --id "$item_id" --project-id "$project_id" --field-id "Status" --single-select-option-id "$column"
        ;;
    
    # Cache management
    cache-project)
        local name="$2"
        local project_id=$(gh project list --owner "$ORG" --limit 100 --json id,title | jq -r ".[] | select(.title == \"$name\") | .id")
        
        if [[ -n "$project_id" ]]; then
            cache_set "project_id" "$project_id"
            cache_set "project_name" "$name"
            echo "Cached project: $name (ID: $project_id)"
        else
            echo "Project not found: $name"
            return 1
        fi
        ;;
    
    clear-cache)
        rm -rf "$CACHE_DIR"/*
        echo "Cache cleared"
        ;;
    
    # Bulk operations for efficiency
    bulk-review)
        local pr="$2"
        local reviews_file="$3"
        
        if [[ -f "$reviews_file" ]]; then
            jq -c '.[]' "$reviews_file" | while read -r review; do
                agent=$(echo "$review" | jq -r '.agent')
                action=$(echo "$review" | jq -r '.action')
                comment=$(echo "$review" | jq -r '.comment')
                
                case "$action" in
                    approve)
                        gh pr review "$pr" --approve -b "[$agent review] $comment"
                        ;;
                    request-changes)
                        gh pr review "$pr" --request-changes -b "[$agent review] $comment"
                        ;;
                    comment)
                        gh pr review "$pr" --comment -b "[$agent review] $comment"
                        ;;
                esac
                
                echo "Added $agent $action review"
            done
        fi
        ;;
    
    help|--help|-h)
        cat << EOF
p - Project CLI for Multi-Agent GitHub Workflows

SYNOPSIS:
  p <command> [arguments...]
  P_ECHO=1 p <command>     # Show gh commands before execution
  P_DEBUG=1 p <command>    # Enable debug output

DESCRIPTION:
  Lightweight wrapper around 'gh' CLI optimized for LLM sub-agents
  executing Ben's 12-step development workflow. All repos created
  under sammons-software-llc organization as private by default.

ENVIRONMENT VARIABLES:
  P_ECHO=1     Show actual gh commands before execution (recommended)
  P_DEBUG=1    Enable verbose debug output
  P_CLI_CACHE  Override cache directory (default: ~/.p-cli-cache)

REPOSITORY COMMANDS:
  create-repo <name>
    Create private repository under sammons-software-llc
    Example: p create-repo note-taker-app
    
  clone-framework
    Download CLAUDE.md and create framework directories
    Creates: context/, archetypes/, personas/, examples/

TASK MANAGEMENT COMMANDS:
  create-task [options]
    Create single GitHub issue with task label
    Options: --title "..." --body "..." --label "..." --assignee <user>
    Example: p create-task --title "Add auth" --label "feature,backend"
    
  bulk-create-tasks <file.json> [project-id]
    Create multiple tasks from JSON file
    Format: [{"title":"...", "body":"...", "labels":"task,feature"}]
    Example: p bulk-create-tasks tasks.json 123
    
  create-typed-task <type> <title> [options]
    Create task with predefined template
    Types: feature, bug, security
    Example: p create-typed-task feature "Add dark mode"
    
  complete-task <issue-num> <pr-num> [comment]
    Close issue and link to PR
    Example: p complete-task 123 456 "Implemented successfully"
    
  get-agent-tasks [agent] [state]
    List tasks filtered by agent label and state
    States: open, closed, all
    Example: p get-agent-tasks architect open

PULL REQUEST COMMANDS:
  create-pr [options]
    Create pull request (passes all args to gh pr create)
    Example: p create-pr --title "[TASK-123] Add auth" --body "..."
    
  review-pr <pr-num> <comment> [agent-name]
    Add review comment with optional agent identifier
    Example: p review-pr 123 "LGTM" security-expert
    
  get-pr-reviews <pr-num> [format]
    Get review status (format: text or json)
    Example: p get-pr-reviews 123 json
    
  check-reviews-complete <pr-num> [required-count]
    Check if required number of approvals met (default: 3)
    Returns: "true" or "false (2/3 approved)"
    Example: p check-reviews-complete 123 3
    
  bulk-review <pr-num> <reviews.json>
    Add multiple reviews from JSON file
    Format: [{"agent":"...", "action":"...", "comment":"..."}]
    Actions: approve, request-changes, comment
    Example: p bulk-review 123 reviews.json

PROJECT BOARD COMMANDS:
  create-project <name>
    Create project board with default columns (TODO, Development, Merged)
    Example: p create-project "Note Taker App"
    
  list-projects
    List all projects in the organization
    Example: p list-projects
    
  add-to-project <type> <number> [project-id]
    Add issue or PR to project board
    Types: issue, pr
    Example: p add-to-project issue 123
    Example: p add-to-project pr 456 PVT_12345
    
  move-to-column <item-id> <column> [project-id]
    Move item to different column
    Columns: TODO, Development, Merged
    Example: p move-to-column PVTI_67890 Development

AGENT COORDINATION COMMANDS:
  set-context <key> <value>
    Store value in shared cache for agent coordination
    Example: p set-context architecture-complete true
    
  get-context <key>
    Retrieve value from shared cache
    Example: p get-context architecture-complete
    
  wait-for-context <key> [timeout-seconds]
    Block until context key exists (default: 300s)
    Example: p wait-for-context all-tests-pass 600

PERFORMANCE COMMANDS:
  cache-project <name>
    Cache project board ID for faster operations
    Example: p cache-project "Note Taker App Development"
    
  clear-cache
    Remove all cached data
    Example: p clear-cache

JSON FILE FORMATS:
  Tasks (bulk-create-tasks):
    [
      {
        "title": "Task title",
        "body": "Task description (optional)",
        "labels": "task,feature,backend (optional)"
      }
    ]
    
  Reviews (bulk-review):
    [
      {
        "agent": "security-expert",
        "action": "approve|request-changes|comment",
        "comment": "Review message"
      }
    ]

WORKFLOW EXAMPLES:
  1. Initialize project (Team Lead Agent):
     P_ECHO=1 p create-repo my-app
     cd my-app
     p clone-framework
     p create-project "My App Development"
     
  2. Create tasks (Architect Agent):
     p bulk-create-tasks architecture-tasks.json
     
  3. Development (Developer Agent):
     p set-context task-123 in-progress
     # ... development ...
     p create-pr --title "[TASK-123] Feature"
     p set-context task-123 ready-for-review
     
  4. Review (Expert Agents):
     p review-pr 456 "Security concern in auth.ts:45" security
     p set-context security-review-456 changes-requested
     
  5. Merge (Team Lead Agent):
     p check-reviews-complete 456 3
     p complete-task 123 456

EXIT CODES:
  0  Success
  1  Error (command failed or invalid arguments)

DEBUGGING:
  P_ECHO=1 p <command>     # See actual gh commands
  gh auth status           # Check authentication
  p clear-cache            # Fix cache issues

SEE ALSO:
  gh(1) - GitHub CLI that this tool wraps
  README.md - Full documentation with more examples
EOF
        ;;
    
    *)
        echo "Unknown command: $1"
        echo "Run 'p help' for usage"
        exit 1
        ;;
esac